{{>partial_header}}
using System;
using System.IO;
using System.Reflection;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Serialization;{{#useSwashbuckle}}
using Swashbuckle.AspNetCore.Swagger;
using Swashbuckle.AspNetCore.SwaggerGen;
using {{packageName}}.Filters;{{/useSwashbuckle}}
using {{packageName}}.Authentication;
using Microsoft.AspNetCore.Authorization;

namespace {{packageName}}
{
    /// <summary>
    /// Startup
    /// </summary>
    public class Startup
    {
        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="configuration"></param>
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        /// <summary>
            /// The application configuration.
        /// </summary>
        public IConfiguration Configuration { get; }

        /// <summary>
        /// This method gets called by the runtime. Use this method to add services to the container.
        /// </summary>
        /// <param name="services"></param>
        public void ConfigureServices(IServiceCollection services)
        {
{{#filter authMethods property="isApiKey" value=true}}
{{#@first}}
            services.AddTransient<IAuthorizationHandler, ApiKeyRequirementHandler>();
            services.AddAuthorization(authConfig =>
            {
{{/@first}}            
                authConfig.AddPolicy("{{name}}",
                    policyBuilder => policyBuilder
                        .AddRequirements(new ApiKeyRequirement(new[] { "my-secret-key" },"{{name}}")));
{{#if @last}}
            });
{{/if}}
{{/filter}}

            // Add framework services.
            services
                .AddMvc({{#not useDefaultRouting}}opts => opts.EnableEndpointRouting = false{{/not}})
                {{#compatibilityVersion}}
                .SetCompatibilityVersion(CompatibilityVersion.{{compatibilityVersion}})
                {{/compatibilityVersion}}
                .{{#useNewtonsoft}}AddNewtonsoftJson{{/useNewtonsoft}}{{#not useNewtonsoft}}AddJsonOptions{{/not}}(opts =>
                {
                    opts.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
                    opts.SerializerSettings.Converters.Add(new StringEnumConverter
                    {
                        {{#useNewtonsoft}}NamingStrategy = new CamelCaseNamingStrategy(){{/useNewtonsoft}}{{#not useNewtonsoft}}CamelCaseText = true{{/not}}
                    });
                });
            {{#useSwashbuckle}}

            services
                .AddSwaggerGen(c =>
                {
                    c.SwaggerDoc("{{#version}}{{{version}}}{{/version}}{{#not version}}v1{{/not}}", new Info
                    {
                        Version = "{{#version}}{{{version}}}{{/version}}{{#not version}}v1{{/not}}",
                        Title = "{{#appName}}{{{appName}}}{{/appName}}{{#not appName}}{{packageName}}{{/not}}",
                        Description = "{{#appName}}{{{appName}}}{{/appName}}{{#not appName}}{{packageName}}{{/not}} (ASP.NET Core 2.0)",
                        Contact = new Contact()
                        {
                           Name = "{{#infoName}}{{{infoName}}}{{/infoName}}{{#not infoName}}OpenAPI-Generator Contributors{{/not}}",
                           Url = "{{#infoUrl}}{{{infoUrl}}}{{/infoUrl}}{{#not infoUrl}}https://github.com/openapitools/openapi-generator{{/not}}",
                           Email = "{{#infoEmail}}{{{infoEmail}}}{{/infoEmail}}"
                        },
                        TermsOfService = "{{#termsOfService}}{{{termsOfService}}}{{/termsOfService}}"
                    });
                    c.CustomSchemaIds(type => type.FriendlyId(true));
                    c.DescribeAllEnumsAsStrings();
                    c.IncludeXmlComments($"{AppContext.BaseDirectory}{Path.DirectorySeparatorChar}{Assembly.GetEntryAssembly().GetName().Name}.xml");
                    {{#basePathWithoutHost}}
                    // Sets the basePath property in the Swagger document generated
                    c.DocumentFilter<BasePathFilter>("{{{basePathWithoutHost}}}");
                    {{/basePathWithoutHost}}

                    // Include DataAnnotation attributes on Controller Action parameters as Swagger validation rules (e.g required, pattern, ..)
                    // Use [ValidateModelState] on Actions to actually validate it in C# as well!
                    c.OperationFilter<GeneratePathParamsValidationFilter>();
                });
            {{/useSwashbuckle}}
        }

        /// <summary>
        /// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        /// </summary>
        /// <param name="app"></param>
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            app.UseHttpsRedirection();
            app
                .UseMvc()
                .UseDefaultFiles()
                .UseStaticFiles(){{#useSwashbuckle}}
                .UseSwagger(c =>
                {
                    c.RouteTemplate = "swagger/{documentName}/openapi.json";
                })
                .UseSwaggerUI(c =>
                {
                    //TODO: Either use the SwaggerGen generated Swagger contract (generated from C# classes)
                    c.SwaggerEndpoint("/swagger/{{#version}}{{{version}}}{{/version}}{{#not version}}v1{{/not}}/openapi.json", "{{#appName}}{{{appName}}}{{/appName}}{{#not appName}}{{packageName}}{{/not}}");

                    //TODO: Or alternatively use the original Swagger contract that's included in the static files
                    // c.SwaggerEndpoint("/openapi-original.json", "{{#appName}}{{{appName}}}{{/appName}}{{#not appName}}{{packageName}}{{/not}} Original");
                }){{/useSwashbuckle}};{{#not useDefaultRouting}}
            app.UseRouting();
            app.UseEndpoints(endpoints =>
	            {
	    	        endpoints.MapControllers();
	            });{{/not}}

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseHsts();
            }
        }
    }
}
